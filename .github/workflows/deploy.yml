# name: üöÄ Deploy Next.js to cPanel via SSH

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: üß≠ Checkout Repository
#         uses: actions/checkout@v4

#       - name: üü¢ Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 22

#       - name: üì¶ Install Dependencies
#         run: npm ci

#       - name: üèóÔ∏è Build Next.js App
#         run: npm run build

#       - name: üìÇ Prepare build-output folder
#         run: |
#           mkdir -p build-output
#           cp -r .next package.json package-lock.json next.config.* tsconfig.* public/ build-output/ 2>/dev/null || true
#           echo "üìÅ Build output content:"
#           ls -la build-output

#       - name: üóúÔ∏è Compress build-output
#         run: |
#           cd build-output
#           tar -czf ../build-output.tar.gz .
#           cd ..
#           echo "‚úÖ build-output.tar.gz created:"
#           ls -lh build-output.tar.gz

#       - name: üì§ Upload compressed build to server
#         uses: appleboy/scp-action@v0.1.7
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           passphrase: ${{ secrets.SSH_PASSPHRASE }}
#           source: "build-output.tar.gz"
#           target: ${{ secrets.DEPLOY_DIR }}
#           overwrite: true

#       - name: üì¶ Upload node_modules to nodevenv
#         uses: appleboy/scp-action@v0.1.7
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           passphrase: ${{ secrets.SSH_PASSPHRASE }}
#           source: "node_modules/*"
#           target: ${{ secrets.NODE_MODULES_DIR }}
#           overwrite: true
#           strip_components: 0

#       - name: ‚öôÔ∏è Extract & Deploy on server
#         uses: appleboy/ssh-action@v1.2.0
#         with:
#           host: ${{ secrets.SSH_HOST }}
#           username: ${{ secrets.SSH_USER }}
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           passphrase: ${{ secrets.SSH_PASSPHRASE }}
#           script: |
#             echo "üöÄ Starting deployment inside Node.js environment..."
#             bash -lc '
#               echo "üîß Activating environment..."
#               source ${{ secrets.NODE_ENV_PATH }}

#               cd ${{ secrets.DEPLOY_DIR }}
#               echo "üì¶ Extracting build-output.tar.gz..."
#               tar -xzf build-output.tar.gz
#               rm -f build-output.tar.gz

#               echo "‚ôªÔ∏è Restarting Node.js app..."
#               mkdir -p tmp
#               touch tmp/restart.txt || true

#               echo "‚úÖ Deployment complete!"
#             '

name: üöÄ Deploy to cPanel via SSH

on:
  push:
    branches:
      - main  # ganti sesuai branch utama kamu

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # --- 1Ô∏è‚É£ Checkout repository
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v4

      # --- 2Ô∏è‚É£ Setup Node.js
      - name: üß∞ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # --- 3Ô∏è‚É£ Build project
      - name: üèóÔ∏è Build Project
        run: |
          npm ci
          npm run build

      # --- 4Ô∏è‚É£ Compress build output
      - name: üì¶ Compress build output
        run: |
          mkdir -p build-output
          cp -r .next package.json package-lock.json next.config.* public tsconfig.json build-output/
          tar -czf build-output.tar.gz -C build-output .

      # --- 5Ô∏è‚É£ Upload build files to server
      - name: üì§ Upload compressed build to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          source: build-output.tar.gz
          target: ${{ secrets.DEPLOY_DIR }}
          overwrite: true

      # --- 6Ô∏è‚É£ Extract & Deploy on server
      - name: ‚öôÔ∏è Extract & Deploy on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "üöÄ Starting deployment inside Node.js environment..."

            # aktifkan environment Node.js di cPanel (jika ada)
            if [ -f "${{ secrets.NODE_ENV_PATH }}" ]; then
              echo "üîß Activating Node.js environment..."
              source ${{ secrets.NODE_ENV_PATH }}
            else
              echo "‚ö†Ô∏è NODE_ENV_PATH not found, continuing without virtualenv"
            fi

            cd ${{ secrets.DEPLOY_DIR }}

            echo "üì¶ Extracting build..."
            tar -xzf build-output.tar.gz
            rm -f build-output.tar.gz

            echo "üì¶ Installing dependencies..."
            if command -v npm >/dev/null 2>&1; then
              npm ci --omit=dev
            else
              echo "‚ùå npm not found in environment! Check Node.js setup in cPanel"
              exit 1
            fi

            echo "‚ôªÔ∏è Restarting app..."
            mkdir -p tmp
            touch tmp/restart.txt || true

            echo "‚úÖ Deployment complete!"
